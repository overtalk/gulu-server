// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match_server.proto

package gamepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddMatchReq struct {
	Player               *PlayerInfo `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	HumanRate            float64     `protobuf:"fixed64,2,opt,name=human_rate,json=humanRate,proto3" json:"human_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddMatchReq) Reset()         { *m = AddMatchReq{} }
func (m *AddMatchReq) String() string { return proto.CompactTextString(m) }
func (*AddMatchReq) ProtoMessage()    {}
func (*AddMatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96d57aa9a9f2d6c4, []int{0}
}

func (m *AddMatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMatchReq.Unmarshal(m, b)
}
func (m *AddMatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMatchReq.Marshal(b, m, deterministic)
}
func (m *AddMatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMatchReq.Merge(m, src)
}
func (m *AddMatchReq) XXX_Size() int {
	return xxx_messageInfo_AddMatchReq.Size(m)
}
func (m *AddMatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMatchReq proto.InternalMessageInfo

func (m *AddMatchReq) GetPlayer() *PlayerInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *AddMatchReq) GetHumanRate() float64 {
	if m != nil {
		return m.HumanRate
	}
	return 0
}

type AddMatchResp struct {
	Result               Result      `protobuf:"varint,1,opt,name=result,proto3,enum=Msg.Result" json:"result,omitempty"`
	RoomID               string      `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	Player               *PlayerInfo `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	Opponent             *PlayerInfo `protobuf:"bytes,4,opt,name=opponent,proto3" json:"opponent,omitempty"`
	Pvp                  *PvpBattle  `protobuf:"bytes,5,opt,name=pvp,proto3" json:"pvp,omitempty"`
	Address              string      `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddMatchResp) Reset()         { *m = AddMatchResp{} }
func (m *AddMatchResp) String() string { return proto.CompactTextString(m) }
func (*AddMatchResp) ProtoMessage()    {}
func (*AddMatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96d57aa9a9f2d6c4, []int{1}
}

func (m *AddMatchResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMatchResp.Unmarshal(m, b)
}
func (m *AddMatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMatchResp.Marshal(b, m, deterministic)
}
func (m *AddMatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMatchResp.Merge(m, src)
}
func (m *AddMatchResp) XXX_Size() int {
	return xxx_messageInfo_AddMatchResp.Size(m)
}
func (m *AddMatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddMatchResp proto.InternalMessageInfo

func (m *AddMatchResp) GetResult() Result {
	if m != nil {
		return m.Result
	}
	return Result_INTERNAL
}

func (m *AddMatchResp) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *AddMatchResp) GetPlayer() *PlayerInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *AddMatchResp) GetOpponent() *PlayerInfo {
	if m != nil {
		return m.Opponent
	}
	return nil
}

func (m *AddMatchResp) GetPvp() *PvpBattle {
	if m != nil {
		return m.Pvp
	}
	return nil
}

func (m *AddMatchResp) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CancelMatchReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelMatchReq) Reset()         { *m = CancelMatchReq{} }
func (m *CancelMatchReq) String() string { return proto.CompactTextString(m) }
func (*CancelMatchReq) ProtoMessage()    {}
func (*CancelMatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96d57aa9a9f2d6c4, []int{2}
}

func (m *CancelMatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelMatchReq.Unmarshal(m, b)
}
func (m *CancelMatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelMatchReq.Marshal(b, m, deterministic)
}
func (m *CancelMatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelMatchReq.Merge(m, src)
}
func (m *CancelMatchReq) XXX_Size() int {
	return xxx_messageInfo_CancelMatchReq.Size(m)
}
func (m *CancelMatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelMatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_CancelMatchReq proto.InternalMessageInfo

func (m *CancelMatchReq) GetPlayerID() string {
	if m != nil {
		return m.PlayerID
	}
	return ""
}

type CancelMatchResp struct {
	Result               Result   `protobuf:"varint,1,opt,name=result,proto3,enum=Msg.Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelMatchResp) Reset()         { *m = CancelMatchResp{} }
func (m *CancelMatchResp) String() string { return proto.CompactTextString(m) }
func (*CancelMatchResp) ProtoMessage()    {}
func (*CancelMatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96d57aa9a9f2d6c4, []int{3}
}

func (m *CancelMatchResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelMatchResp.Unmarshal(m, b)
}
func (m *CancelMatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelMatchResp.Marshal(b, m, deterministic)
}
func (m *CancelMatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelMatchResp.Merge(m, src)
}
func (m *CancelMatchResp) XXX_Size() int {
	return xxx_messageInfo_CancelMatchResp.Size(m)
}
func (m *CancelMatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelMatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_CancelMatchResp proto.InternalMessageInfo

func (m *CancelMatchResp) GetResult() Result {
	if m != nil {
		return m.Result
	}
	return Result_INTERNAL
}

func init() {
	proto.RegisterType((*AddMatchReq)(nil), "Msg.AddMatchReq")
	proto.RegisterType((*AddMatchResp)(nil), "Msg.AddMatchResp")
	proto.RegisterType((*CancelMatchReq)(nil), "Msg.CancelMatchReq")
	proto.RegisterType((*CancelMatchResp)(nil), "Msg.CancelMatchResp")
}

func init() { proto.RegisterFile("match_server.proto", fileDescriptor_96d57aa9a9f2d6c4) }

var fileDescriptor_96d57aa9a9f2d6c4 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0x26, 0x76, 0x37, 0x36, 0x27, 0xb5, 0xbb, 0x8e, 0x22, 0x21, 0x20, 0x94, 0xec, 0x85, 0x0b,
	0x4a, 0x52, 0x2b, 0x88, 0x20, 0x22, 0xae, 0x0b, 0xd2, 0x8b, 0x42, 0x99, 0xe2, 0x8d, 0x37, 0x65,
	0x9a, 0x8c, 0x49, 0x21, 0x99, 0x39, 0x9d, 0x99, 0x04, 0x7d, 0x12, 0x9f, 0xce, 0x77, 0x91, 0x4e,
	0xd2, 0x9a, 0xaa, 0xc8, 0xde, 0xe5, 0xfb, 0xc9, 0xc7, 0x77, 0xce, 0x1c, 0x20, 0x15, 0x33, 0x69,
	0xb1, 0xd6, 0x5c, 0x35, 0x5c, 0xc5, 0xa8, 0xa4, 0x91, 0x64, 0xb0, 0xd0, 0x79, 0x38, 0x52, 0x5c,
	0xd7, 0xa5, 0x69, 0xa9, 0xd0, 0xc3, 0x06, 0xbb, 0xcf, 0x4b, 0x6c, 0xf0, 0xc4, 0x1f, 0x7d, 0x06,
	0xff, 0x43, 0x96, 0x2d, 0xf6, 0x41, 0x94, 0xef, 0xc8, 0x33, 0x70, 0xb1, 0x64, 0xdf, 0xb9, 0x0a,
	0x9c, 0x89, 0x73, 0xed, 0xcf, 0x2e, 0xe2, 0x85, 0xce, 0xe3, 0xa5, 0xa5, 0xe6, 0xe2, 0xab, 0xa4,
	0x9d, 0x4c, 0x9e, 0x02, 0x14, 0x75, 0xc5, 0xc4, 0x5a, 0x31, 0xc3, 0x83, 0x7b, 0x13, 0xe7, 0xda,
	0xa1, 0x9e, 0x65, 0x28, 0x33, 0x3c, 0xfa, 0xe9, 0xc0, 0xe8, 0x77, 0xae, 0x46, 0x72, 0x05, 0x6e,
	0x5b, 0xca, 0x06, 0x8f, 0x67, 0xbe, 0x0d, 0xa6, 0x96, 0xa2, 0x9d, 0x44, 0x9e, 0x80, 0xab, 0xa4,
	0xac, 0xe6, 0xb7, 0x36, 0xd0, 0xa3, 0x1d, 0xea, 0xb5, 0x1a, 0xfc, 0xbf, 0xd5, 0x73, 0x18, 0x4a,
	0x44, 0x29, 0xb8, 0x30, 0xc1, 0xd9, 0xbf, 0xad, 0x47, 0x03, 0x99, 0xc0, 0x00, 0x1b, 0x0c, 0xce,
	0xad, 0x6f, 0xdc, 0xfa, 0x1a, 0xbc, 0x61, 0xc6, 0x94, 0x9c, 0xee, 0x25, 0x12, 0xc0, 0x7d, 0x96,
	0x65, 0x8a, 0x6b, 0x1d, 0xb8, 0xb6, 0xd0, 0x01, 0x46, 0x2f, 0x60, 0xfc, 0x91, 0x89, 0x94, 0x97,
	0xc7, 0xcd, 0x85, 0x30, 0x6c, 0x4b, 0xcc, 0x6f, 0xed, 0x88, 0x1e, 0x3d, 0xe2, 0xe8, 0x35, 0x5c,
	0x9c, 0xb8, 0xef, 0xb8, 0x8f, 0xd9, 0x0f, 0x07, 0xce, 0xed, 0x2f, 0xe4, 0x0a, 0xce, 0x96, 0x5b,
	0x91, 0x93, 0x51, 0x5b, 0x73, 0x2b, 0x72, 0xca, 0x77, 0xe1, 0x83, 0x1e, 0xd2, 0x48, 0x12, 0x18,
	0x1e, 0x76, 0x4e, 0x2e, 0xad, 0xd4, 0x7b, 0xda, 0xf0, 0xe1, 0x1f, 0x8c, 0x46, 0xf2, 0x06, 0xfc,
	0x5e, 0x2f, 0xf2, 0xc8, 0x3a, 0x4e, 0xe7, 0x0a, 0x1f, 0xff, 0x4d, 0x6a, 0xbc, 0x79, 0xff, 0xe5,
	0x5d, 0x51, 0x6f, 0xa6, 0xd3, 0x69, 0xfc, 0x6d, 0x2b, 0x32, 0x29, 0xf2, 0x38, 0x95, 0x55, 0xb2,
	0x62, 0xb5, 0x66, 0x39, 0x5f, 0x15, 0x52, 0x9a, 0xe4, 0x13, 0xab, 0xf8, 0xca, 0x9e, 0x5a, 0x62,
	0x4f, 0x2d, 0x95, 0x65, 0xd2, 0xbc, 0x7c, 0x9b, 0xb3, 0x8a, 0xe3, 0x66, 0xe3, 0x5a, 0xee, 0xd5,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x4d, 0xc8, 0x81, 0xc4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MatchClient is the client API for Match service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	AddMatch(ctx context.Context, in *AddMatchReq, opts ...grpc.CallOption) (*AddMatchResp, error)
	CancelMatch(ctx context.Context, in *CancelMatchReq, opts ...grpc.CallOption) (*CancelMatchResp, error)
}

type matchClient struct {
	cc *grpc.ClientConn
}

func NewMatchClient(cc *grpc.ClientConn) MatchClient {
	return &matchClient{cc}
}

func (c *matchClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/Msg.Match/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchClient) AddMatch(ctx context.Context, in *AddMatchReq, opts ...grpc.CallOption) (*AddMatchResp, error) {
	out := new(AddMatchResp)
	err := c.cc.Invoke(ctx, "/Msg.Match/AddMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchClient) CancelMatch(ctx context.Context, in *CancelMatchReq, opts ...grpc.CallOption) (*CancelMatchResp, error) {
	out := new(CancelMatchResp)
	err := c.cc.Invoke(ctx, "/Msg.Match/CancelMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServer is the server API for Match service.
type MatchServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	AddMatch(context.Context, *AddMatchReq) (*AddMatchResp, error)
	CancelMatch(context.Context, *CancelMatchReq) (*CancelMatchResp, error)
}

func RegisterMatchServer(s *grpc.Server, srv MatchServer) {
	s.RegisterService(&_Match_serviceDesc, srv)
}

func _Match_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Match/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Match_AddMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).AddMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Match/AddMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).AddMatch(ctx, req.(*AddMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Match_CancelMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).CancelMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Match/CancelMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).CancelMatch(ctx, req.(*CancelMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Match_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Msg.Match",
	HandlerType: (*MatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Match_Ping_Handler,
		},
		{
			MethodName: "AddMatch",
			Handler:    _Match_AddMatch_Handler,
		},
		{
			MethodName: "CancelMatch",
			Handler:    _Match_CancelMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_server.proto",
}
