// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pvp_server.proto

package gamepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlayerInfo_Seat int32

const (
	PlayerInfo_seat1 PlayerInfo_Seat = 0
	PlayerInfo_seat2 PlayerInfo_Seat = 1
)

var PlayerInfo_Seat_name = map[int32]string{
	0: "seat1",
	1: "seat2",
}

var PlayerInfo_Seat_value = map[string]int32{
	"seat1": 0,
	"seat2": 1,
}

func (x PlayerInfo_Seat) String() string {
	return proto.EnumName(PlayerInfo_Seat_name, int32(x))
}

func (PlayerInfo_Seat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{0, 0}
}

// PvpStatus describes the status of pvp battle
type PlayerInfo struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname             string          `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Url                  string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Level                int64           `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Dan                  int64           `protobuf:"varint,5,opt,name=dan,proto3" json:"dan,omitempty"`
	Score                int64           `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Seat                 PlayerInfo_Seat `protobuf:"varint,7,opt,name=seat,proto3,enum=Msg.PlayerInfo_Seat" json:"seat,omitempty"`
	Snapshot             *Snapshot       `protobuf:"bytes,8,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Fashion              []int64         `protobuf:"varint,9,rep,packed,name=fashion,proto3" json:"fashion,omitempty"`
	Weapon               []int64         `protobuf:"varint,10,rep,packed,name=weapon,proto3" json:"weapon,omitempty"`
	Cup                  int64           `protobuf:"varint,11,opt,name=cup,proto3" json:"cup,omitempty"`
	Arena                map[int64]int64 `protobuf:"bytes,12,rep,name=arena,proto3" json:"arena,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Buffer               string          `protobuf:"bytes,13,opt,name=buffer,proto3" json:"buffer,omitempty"`
	HistCup              int64           `protobuf:"varint,14,opt,name=histCup,proto3" json:"histCup,omitempty"`
	WinStreak            int64           `protobuf:"varint,15,opt,name=winStreak,proto3" json:"winStreak,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{0}
}

func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInfo.Unmarshal(m, b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return xxx_messageInfo_PlayerInfo.Size(m)
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlayerInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *PlayerInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PlayerInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerInfo) GetDan() int64 {
	if m != nil {
		return m.Dan
	}
	return 0
}

func (m *PlayerInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *PlayerInfo) GetSeat() PlayerInfo_Seat {
	if m != nil {
		return m.Seat
	}
	return PlayerInfo_seat1
}

func (m *PlayerInfo) GetSnapshot() *Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *PlayerInfo) GetFashion() []int64 {
	if m != nil {
		return m.Fashion
	}
	return nil
}

func (m *PlayerInfo) GetWeapon() []int64 {
	if m != nil {
		return m.Weapon
	}
	return nil
}

func (m *PlayerInfo) GetCup() int64 {
	if m != nil {
		return m.Cup
	}
	return 0
}

func (m *PlayerInfo) GetArena() map[int64]int64 {
	if m != nil {
		return m.Arena
	}
	return nil
}

func (m *PlayerInfo) GetBuffer() string {
	if m != nil {
		return m.Buffer
	}
	return ""
}

func (m *PlayerInfo) GetHistCup() int64 {
	if m != nil {
		return m.HistCup
	}
	return 0
}

func (m *PlayerInfo) GetWinStreak() int64 {
	if m != nil {
		return m.WinStreak
	}
	return 0
}

type Snapshot struct {
	Shoots               []*Shoot `protobuf:"bytes,1,rep,name=shoots,proto3" json:"shoots,omitempty"`
	OtShoots             []*Shoot `protobuf:"bytes,2,rep,name=otShoots,proto3" json:"otShoots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{1}
}

func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Snapshot.Unmarshal(m, b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return xxx_messageInfo_Snapshot.Size(m)
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetShoots() []*Shoot {
	if m != nil {
		return m.Shoots
	}
	return nil
}

func (m *Snapshot) GetOtShoots() []*Shoot {
	if m != nil {
		return m.OtShoots
	}
	return nil
}

// PingReq & PingResp is used to ping server
type PingReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReq) Reset()         { *m = PingReq{} }
func (m *PingReq) String() string { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()    {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{2}
}

func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReq.Unmarshal(m, b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
}
func (m *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(m, src)
}
func (m *PingReq) XXX_Size() int {
	return xxx_messageInfo_PingReq.Size(m)
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

type PingResp struct {
	Result               Result   `protobuf:"varint,1,opt,name=result,proto3,enum=Msg.Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResp) Reset()         { *m = PingResp{} }
func (m *PingResp) String() string { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()    {}
func (*PingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{3}
}

func (m *PingResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResp.Unmarshal(m, b)
}
func (m *PingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResp.Marshal(b, m, deterministic)
}
func (m *PingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResp.Merge(m, src)
}
func (m *PingResp) XXX_Size() int {
	return xxx_messageInfo_PingResp.Size(m)
}
func (m *PingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResp.DiscardUnknown(m)
}

var xxx_messageInfo_PingResp proto.InternalMessageInfo

func (m *PingResp) GetResult() Result {
	if m != nil {
		return m.Result
	}
	return Result_INTERNAL
}

// CreateRoomReq & CreateRoomResp is used to start a pvp room
type CreateRoomReq struct {
	Player1              *PlayerInfo   `protobuf:"bytes,1,opt,name=player1,proto3" json:"player1,omitempty"`
	Player2              *PlayerInfo   `protobuf:"bytes,2,opt,name=player2,proto3" json:"player2,omitempty"`
	Address              string        `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Pvf                  *PvfSelectReq `protobuf:"bytes,4,opt,name=pvf,proto3" json:"pvf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateRoomReq) Reset()         { *m = CreateRoomReq{} }
func (m *CreateRoomReq) String() string { return proto.CompactTextString(m) }
func (*CreateRoomReq) ProtoMessage()    {}
func (*CreateRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{4}
}

func (m *CreateRoomReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRoomReq.Unmarshal(m, b)
}
func (m *CreateRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRoomReq.Marshal(b, m, deterministic)
}
func (m *CreateRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoomReq.Merge(m, src)
}
func (m *CreateRoomReq) XXX_Size() int {
	return xxx_messageInfo_CreateRoomReq.Size(m)
}
func (m *CreateRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoomReq proto.InternalMessageInfo

func (m *CreateRoomReq) GetPlayer1() *PlayerInfo {
	if m != nil {
		return m.Player1
	}
	return nil
}

func (m *CreateRoomReq) GetPlayer2() *PlayerInfo {
	if m != nil {
		return m.Player2
	}
	return nil
}

func (m *CreateRoomReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateRoomReq) GetPvf() *PvfSelectReq {
	if m != nil {
		return m.Pvf
	}
	return nil
}

type CreateRoomResp struct {
	Result               Result           `protobuf:"varint,1,opt,name=result,proto3,enum=Msg.Result" json:"result,omitempty"`
	RoomID               string           `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	Pvp                  *PvpBattle       `protobuf:"bytes,3,opt,name=pvp,proto3" json:"pvp,omitempty"`
	Snapshot             *PlayerInfo      `protobuf:"bytes,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Address              string           `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	SnapshotInfo         *PvpSnapshotInfo `protobuf:"bytes,6,opt,name=snapshotInfo,proto3" json:"snapshotInfo,omitempty"`
	OtSnapshotInfo       *PvpSnapshotInfo `protobuf:"bytes,7,opt,name=otSnapshotInfo,proto3" json:"otSnapshotInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateRoomResp) Reset()         { *m = CreateRoomResp{} }
func (m *CreateRoomResp) String() string { return proto.CompactTextString(m) }
func (*CreateRoomResp) ProtoMessage()    {}
func (*CreateRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{5}
}

func (m *CreateRoomResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRoomResp.Unmarshal(m, b)
}
func (m *CreateRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRoomResp.Marshal(b, m, deterministic)
}
func (m *CreateRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoomResp.Merge(m, src)
}
func (m *CreateRoomResp) XXX_Size() int {
	return xxx_messageInfo_CreateRoomResp.Size(m)
}
func (m *CreateRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoomResp proto.InternalMessageInfo

func (m *CreateRoomResp) GetResult() Result {
	if m != nil {
		return m.Result
	}
	return Result_INTERNAL
}

func (m *CreateRoomResp) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *CreateRoomResp) GetPvp() *PvpBattle {
	if m != nil {
		return m.Pvp
	}
	return nil
}

func (m *CreateRoomResp) GetSnapshot() *PlayerInfo {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *CreateRoomResp) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateRoomResp) GetSnapshotInfo() *PvpSnapshotInfo {
	if m != nil {
		return m.SnapshotInfo
	}
	return nil
}

func (m *CreateRoomResp) GetOtSnapshotInfo() *PvpSnapshotInfo {
	if m != nil {
		return m.OtSnapshotInfo
	}
	return nil
}

type ReloadReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReloadReq) Reset()         { *m = ReloadReq{} }
func (m *ReloadReq) String() string { return proto.CompactTextString(m) }
func (*ReloadReq) ProtoMessage()    {}
func (*ReloadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{6}
}

func (m *ReloadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReloadReq.Unmarshal(m, b)
}
func (m *ReloadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReloadReq.Marshal(b, m, deterministic)
}
func (m *ReloadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadReq.Merge(m, src)
}
func (m *ReloadReq) XXX_Size() int {
	return xxx_messageInfo_ReloadReq.Size(m)
}
func (m *ReloadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadReq proto.InternalMessageInfo

type ReloadResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReloadResp) Reset()         { *m = ReloadResp{} }
func (m *ReloadResp) String() string { return proto.CompactTextString(m) }
func (*ReloadResp) ProtoMessage()    {}
func (*ReloadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{7}
}

func (m *ReloadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReloadResp.Unmarshal(m, b)
}
func (m *ReloadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReloadResp.Marshal(b, m, deterministic)
}
func (m *ReloadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadResp.Merge(m, src)
}
func (m *ReloadResp) XXX_Size() int {
	return xxx_messageInfo_ReloadResp.Size(m)
}
func (m *ReloadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadResp proto.InternalMessageInfo

type BattleStatusACKReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	RoomID               string   `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	RecIndex             int64    `protobuf:"varint,3,opt,name=recIndex,proto3" json:"recIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BattleStatusACKReq) Reset()         { *m = BattleStatusACKReq{} }
func (m *BattleStatusACKReq) String() string { return proto.CompactTextString(m) }
func (*BattleStatusACKReq) ProtoMessage()    {}
func (*BattleStatusACKReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{8}
}

func (m *BattleStatusACKReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BattleStatusACKReq.Unmarshal(m, b)
}
func (m *BattleStatusACKReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BattleStatusACKReq.Marshal(b, m, deterministic)
}
func (m *BattleStatusACKReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStatusACKReq.Merge(m, src)
}
func (m *BattleStatusACKReq) XXX_Size() int {
	return xxx_messageInfo_BattleStatusACKReq.Size(m)
}
func (m *BattleStatusACKReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStatusACKReq.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStatusACKReq proto.InternalMessageInfo

func (m *BattleStatusACKReq) GetPlayerID() string {
	if m != nil {
		return m.PlayerID
	}
	return ""
}

func (m *BattleStatusACKReq) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *BattleStatusACKReq) GetRecIndex() int64 {
	if m != nil {
		return m.RecIndex
	}
	return 0
}

type BattleStatusACKResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BattleStatusACKResp) Reset()         { *m = BattleStatusACKResp{} }
func (m *BattleStatusACKResp) String() string { return proto.CompactTextString(m) }
func (*BattleStatusACKResp) ProtoMessage()    {}
func (*BattleStatusACKResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{9}
}

func (m *BattleStatusACKResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BattleStatusACKResp.Unmarshal(m, b)
}
func (m *BattleStatusACKResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BattleStatusACKResp.Marshal(b, m, deterministic)
}
func (m *BattleStatusACKResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStatusACKResp.Merge(m, src)
}
func (m *BattleStatusACKResp) XXX_Size() int {
	return xxx_messageInfo_BattleStatusACKResp.Size(m)
}
func (m *BattleStatusACKResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStatusACKResp.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStatusACKResp proto.InternalMessageInfo

type GetRoomInfoReq struct {
	RoomID               string   `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	PlayerID             string   `protobuf:"bytes,2,opt,name=playerID,proto3" json:"playerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoomInfoReq) Reset()         { *m = GetRoomInfoReq{} }
func (m *GetRoomInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetRoomInfoReq) ProtoMessage()    {}
func (*GetRoomInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{10}
}

func (m *GetRoomInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoomInfoReq.Unmarshal(m, b)
}
func (m *GetRoomInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoomInfoReq.Marshal(b, m, deterministic)
}
func (m *GetRoomInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomInfoReq.Merge(m, src)
}
func (m *GetRoomInfoReq) XXX_Size() int {
	return xxx_messageInfo_GetRoomInfoReq.Size(m)
}
func (m *GetRoomInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomInfoReq proto.InternalMessageInfo

func (m *GetRoomInfoReq) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *GetRoomInfoReq) GetPlayerID() string {
	if m != nil {
		return m.PlayerID
	}
	return ""
}

type GetRoomInfoResp struct {
	Result               Result   `protobuf:"varint,1,opt,name=result,proto3,enum=Msg.Result" json:"result,omitempty"`
	OpponentID           string   `protobuf:"bytes,2,opt,name=opponentID,proto3" json:"opponentID,omitempty"`
	PvpGrade             int64    `protobuf:"varint,3,opt,name=pvpGrade,proto3" json:"pvpGrade,omitempty"`
	IsGameStarted        bool     `protobuf:"varint,4,opt,name=isGameStarted,proto3" json:"isGameStarted,omitempty"`
	IsPvf                bool     `protobuf:"varint,5,opt,name=isPvf,proto3" json:"isPvf,omitempty"`
	OpponentBuffer       string   `protobuf:"bytes,6,opt,name=opponentBuffer,proto3" json:"opponentBuffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoomInfoResp) Reset()         { *m = GetRoomInfoResp{} }
func (m *GetRoomInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetRoomInfoResp) ProtoMessage()    {}
func (*GetRoomInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aabdeb9eab865a2, []int{11}
}

func (m *GetRoomInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoomInfoResp.Unmarshal(m, b)
}
func (m *GetRoomInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoomInfoResp.Marshal(b, m, deterministic)
}
func (m *GetRoomInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomInfoResp.Merge(m, src)
}
func (m *GetRoomInfoResp) XXX_Size() int {
	return xxx_messageInfo_GetRoomInfoResp.Size(m)
}
func (m *GetRoomInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomInfoResp proto.InternalMessageInfo

func (m *GetRoomInfoResp) GetResult() Result {
	if m != nil {
		return m.Result
	}
	return Result_INTERNAL
}

func (m *GetRoomInfoResp) GetOpponentID() string {
	if m != nil {
		return m.OpponentID
	}
	return ""
}

func (m *GetRoomInfoResp) GetPvpGrade() int64 {
	if m != nil {
		return m.PvpGrade
	}
	return 0
}

func (m *GetRoomInfoResp) GetIsGameStarted() bool {
	if m != nil {
		return m.IsGameStarted
	}
	return false
}

func (m *GetRoomInfoResp) GetIsPvf() bool {
	if m != nil {
		return m.IsPvf
	}
	return false
}

func (m *GetRoomInfoResp) GetOpponentBuffer() string {
	if m != nil {
		return m.OpponentBuffer
	}
	return ""
}

func init() {
	proto.RegisterEnum("Msg.PlayerInfo_Seat", PlayerInfo_Seat_name, PlayerInfo_Seat_value)
	proto.RegisterType((*PlayerInfo)(nil), "Msg.PlayerInfo")
	proto.RegisterMapType((map[int64]int64)(nil), "Msg.PlayerInfo.ArenaEntry")
	proto.RegisterType((*Snapshot)(nil), "Msg.Snapshot")
	proto.RegisterType((*PingReq)(nil), "Msg.PingReq")
	proto.RegisterType((*PingResp)(nil), "Msg.PingResp")
	proto.RegisterType((*CreateRoomReq)(nil), "Msg.CreateRoomReq")
	proto.RegisterType((*CreateRoomResp)(nil), "Msg.CreateRoomResp")
	proto.RegisterType((*ReloadReq)(nil), "Msg.ReloadReq")
	proto.RegisterType((*ReloadResp)(nil), "Msg.ReloadResp")
	proto.RegisterType((*BattleStatusACKReq)(nil), "Msg.BattleStatusACKReq")
	proto.RegisterType((*BattleStatusACKResp)(nil), "Msg.BattleStatusACKResp")
	proto.RegisterType((*GetRoomInfoReq)(nil), "Msg.GetRoomInfoReq")
	proto.RegisterType((*GetRoomInfoResp)(nil), "Msg.GetRoomInfoResp")
}

func init() { proto.RegisterFile("pvp_server.proto", fileDescriptor_8aabdeb9eab865a2) }

var fileDescriptor_8aabdeb9eab865a2 = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x9e, 0x2c, 0xdb, 0x91, 0x8f, 0x13, 0xc7, 0x65, 0xdb, 0x4d, 0x10, 0x8a, 0xc1, 0x50, 0x87,
	0xc2, 0xc5, 0x06, 0x3b, 0xd5, 0x30, 0x20, 0xfb, 0xc3, 0xd0, 0x26, 0x41, 0x10, 0x6c, 0x05, 0x3c,
	0x7a, 0xeb, 0xc5, 0x6e, 0x06, 0xc6, 0xa2, 0x1d, 0x21, 0xb6, 0xc8, 0x90, 0x94, 0xda, 0xbc, 0xcf,
	0xae, 0xf7, 0x22, 0xbb, 0xdf, 0xcb, 0xec, 0x66, 0x20, 0xa9, 0x1f, 0xcb, 0x49, 0x80, 0xde, 0xf1,
	0xfb, 0xce, 0x21, 0xcf, 0xdf, 0x77, 0x04, 0xc1, 0x90, 0xe7, 0xfc, 0x4f, 0x49, 0x45, 0x4e, 0xc5,
	0x84, 0x0b, 0xa6, 0x18, 0x72, 0xdf, 0xca, 0x55, 0xb0, 0x2f, 0xa8, 0xcc, 0xd6, 0xca, 0x52, 0x41,
	0x8f, 0xe7, 0xbc, 0x3e, 0x2e, 0xed, 0x31, 0xfc, 0xcf, 0x05, 0x98, 0xad, 0xc9, 0x2d, 0x15, 0x17,
	0xe9, 0x92, 0xa1, 0x01, 0xb4, 0x92, 0xd8, 0x77, 0x46, 0xce, 0xb8, 0x87, 0x5b, 0x49, 0x8c, 0x02,
	0xf0, 0xd2, 0x64, 0x71, 0x9d, 0x92, 0x0d, 0xf5, 0x5b, 0x86, 0xad, 0x30, 0x1a, 0x82, 0x9b, 0x89,
	0xb5, 0xef, 0x1a, 0x5a, 0x1f, 0xd1, 0x13, 0xe8, 0xac, 0x69, 0x4e, 0xd7, 0x7e, 0x7b, 0xe4, 0x8c,
	0x5d, 0x6c, 0x81, 0xf6, 0x8b, 0x49, 0xea, 0x77, 0x0c, 0xa7, 0x8f, 0xda, 0x4f, 0x2e, 0x98, 0xa0,
	0x7e, 0xd7, 0xfa, 0x19, 0x80, 0xc6, 0xd0, 0x96, 0x94, 0x28, 0x7f, 0x6f, 0xe4, 0x8c, 0x07, 0xd1,
	0x93, 0xc9, 0x5b, 0xb9, 0x9a, 0xd4, 0xa9, 0x4d, 0xe6, 0x94, 0x28, 0x6c, 0x3c, 0xd0, 0x4b, 0xf0,
	0x64, 0x4a, 0xb8, 0xbc, 0x62, 0xca, 0xf7, 0x46, 0xce, 0xb8, 0x1f, 0x1d, 0x18, 0xef, 0x79, 0x41,
	0xe2, 0xca, 0x8c, 0x7c, 0xd8, 0x5b, 0x12, 0x79, 0x95, 0xb0, 0xd4, 0xef, 0x8d, 0xdc, 0xb1, 0x8b,
	0x4b, 0x88, 0x3e, 0x85, 0xee, 0x7b, 0x4a, 0x38, 0x4b, 0x7d, 0x30, 0x86, 0x02, 0xe9, 0x74, 0x17,
	0x19, 0xf7, 0xfb, 0x36, 0xdd, 0x45, 0xc6, 0xd1, 0x11, 0x74, 0x88, 0xa0, 0x29, 0xf1, 0xf7, 0x47,
	0xee, 0xb8, 0x1f, 0x05, 0xbb, 0x99, 0xbd, 0xd6, 0xc6, 0xb3, 0x54, 0x89, 0x5b, 0x6c, 0x1d, 0xf5,
	0xdb, 0x97, 0xd9, 0x72, 0x49, 0x85, 0x7f, 0x60, 0xba, 0x53, 0x20, 0x9d, 0xcd, 0x55, 0x22, 0xd5,
	0x49, 0xc6, 0xfd, 0x81, 0x79, 0xbf, 0x84, 0xe8, 0x19, 0xf4, 0xde, 0x27, 0xe9, 0x5c, 0x09, 0x4a,
	0xae, 0xfd, 0x43, 0x63, 0xab, 0x89, 0xe0, 0x18, 0xa0, 0x0e, 0xa2, 0x33, 0xbc, 0xa6, 0xb7, 0x66,
	0x4a, 0x2e, 0xd6, 0x47, 0xdd, 0xd0, 0x9c, 0xac, 0x33, 0x3b, 0x23, 0x17, 0x5b, 0xf0, 0x5d, 0xeb,
	0xd8, 0x09, 0x9f, 0x41, 0x5b, 0x37, 0x0e, 0xf5, 0xa0, 0xa3, 0x5b, 0xf7, 0x6a, 0xf8, 0x49, 0x79,
	0x8c, 0x86, 0x4e, 0xf8, 0x0e, 0xbc, 0xb2, 0x67, 0x28, 0x84, 0xae, 0xbc, 0x62, 0x4c, 0x49, 0xdf,
	0x31, 0x65, 0x82, 0x6d, 0xa9, 0xa6, 0x70, 0x61, 0x41, 0x2f, 0xc0, 0x63, 0x6a, 0x6e, 0xbd, 0x5a,
	0x77, 0xbc, 0x2a, 0x5b, 0xd8, 0x83, 0xbd, 0x59, 0x92, 0xae, 0x30, 0xbd, 0x09, 0xa7, 0xe0, 0xd9,
	0xa3, 0xe4, 0xe8, 0x39, 0x74, 0xad, 0x24, 0x4d, 0xee, 0x83, 0xa8, 0x6f, 0x2e, 0x63, 0x43, 0xe1,
	0xc2, 0x14, 0xfe, 0xe5, 0xc0, 0xc1, 0x89, 0xa0, 0x44, 0x51, 0xcc, 0xd8, 0x06, 0xd3, 0x1b, 0xf4,
	0x12, 0xf6, 0xb8, 0xe9, 0xf6, 0x2b, 0x73, 0xaf, 0x1f, 0x1d, 0xee, 0x4c, 0x00, 0x97, 0xf6, 0xda,
	0x35, 0x32, 0xad, 0x78, 0xd8, 0x35, 0xd2, 0xb3, 0x20, 0x71, 0x2c, 0xa8, 0x94, 0x85, 0x84, 0x4b,
	0x88, 0x9e, 0x83, 0xcb, 0xf3, 0xa5, 0x11, 0x71, 0x3f, 0x7a, 0x64, 0x1f, 0xc8, 0x97, 0x73, 0xba,
	0xa6, 0x0b, 0x85, 0xe9, 0x0d, 0xd6, 0xd6, 0xf0, 0xef, 0x16, 0x0c, 0xb6, 0xd3, 0xfc, 0xc8, 0xf2,
	0xb4, 0x34, 0x04, 0x63, 0x9b, 0x8b, 0xd3, 0x62, 0x9f, 0x0a, 0x84, 0x46, 0x3a, 0x28, 0x37, 0xa9,
	0xf4, 0xa3, 0x41, 0x11, 0x94, 0xbf, 0x21, 0x4a, 0xad, 0xa9, 0x8e, 0xc8, 0xd1, 0x97, 0x5b, 0xaa,
	0x6f, 0xdf, 0x5f, 0x5c, 0x43, 0xf7, 0x65, 0x75, 0x9d, 0x66, 0x75, 0xc7, 0xb0, 0x5f, 0x7a, 0xe9,
	0x3b, 0x66, 0x07, 0xfb, 0xe5, 0xba, 0xe5, 0x7c, 0xbe, 0x65, 0xc3, 0x0d, 0x4f, 0xf4, 0x03, 0x0c,
	0x98, 0xda, 0xb6, 0x9b, 0x55, 0x7d, 0xe8, 0xee, 0x8e, 0x6f, 0xd8, 0x87, 0x1e, 0xa6, 0x6b, 0x46,
	0x62, 0xad, 0x8a, 0x7d, 0x80, 0x12, 0x48, 0x1e, 0xc6, 0x80, 0x6c, 0xa1, 0x73, 0x45, 0x54, 0x26,
	0x5f, 0x9f, 0xfc, 0xac, 0xc7, 0x1e, 0x80, 0x67, 0x67, 0x75, 0x71, 0x5a, 0x7c, 0x91, 0x2a, 0xfc,
	0x60, 0x17, 0x03, 0xf0, 0x04, 0x5d, 0x5c, 0xa4, 0x31, 0xfd, 0x60, 0x5a, 0xe9, 0xe2, 0x0a, 0x87,
	0x4f, 0xe1, 0xf1, 0x9d, 0x28, 0x92, 0x87, 0xa7, 0x30, 0x38, 0xa7, 0x4a, 0x0f, 0xd1, 0xa4, 0x4d,
	0x6f, 0xb6, 0x1e, 0x77, 0x76, 0x1f, 0xaf, 0x12, 0x6a, 0x35, 0x13, 0x0a, 0xff, 0x75, 0xe0, 0xb0,
	0xf1, 0xcc, 0xc7, 0xea, 0xe1, 0x73, 0x00, 0xc6, 0x39, 0x4b, 0x69, 0xaa, 0xaa, 0x67, 0xb7, 0x18,
	0x13, 0x34, 0xe7, 0xe7, 0x82, 0xc4, 0xb4, 0xac, 0xa8, 0xc4, 0xe8, 0x0b, 0x38, 0x48, 0xe4, 0x39,
	0xd9, 0xe8, 0x8a, 0x84, 0xa2, 0xb1, 0x91, 0x85, 0x87, 0x9b, 0xa4, 0xfe, 0x38, 0x24, 0x72, 0x96,
	0x2f, 0x8d, 0x10, 0x3c, 0x6c, 0x01, 0x7a, 0x01, 0x83, 0x32, 0xca, 0x1b, 0xfb, 0xa9, 0xea, 0x9a,
	0xd8, 0x3b, 0x6c, 0xf4, 0x4f, 0x1b, 0xdc, 0x59, 0xae, 0x8b, 0x69, 0xeb, 0x3d, 0x46, 0xfb, 0x76,
	0xd8, 0x76, 0xbb, 0x83, 0x83, 0x2d, 0x24, 0x39, 0xfa, 0x06, 0xa0, 0xde, 0x09, 0x84, 0x8c, 0xb1,
	0xb1, 0xcb, 0xc1, 0xe3, 0x3b, 0x9c, 0xe4, 0xe8, 0x2b, 0xe8, 0x98, 0x0f, 0x07, 0x1a, 0x56, 0x4a,
	0x32, 0x1f, 0x14, 0x7a, 0x13, 0x3c, 0xda, 0x61, 0x8c, 0xf7, 0xde, 0xd9, 0x86, 0x29, 0xfd, 0x0d,
	0xb7, 0x0b, 0x50, 0x20, 0xed, 0x3e, 0x6c, 0x12, 0x92, 0xa3, 0x63, 0xe8, 0xcd, 0x33, 0x21, 0x68,
	0x1a, 0x53, 0x81, 0x6a, 0xa5, 0x96, 0x94, 0xbe, 0xf4, 0xf4, 0x1e, 0x56, 0x72, 0x74, 0x0a, 0x87,
	0x0d, 0xbd, 0x2c, 0xae, 0xd1, 0x67, 0xc6, 0xf3, 0xae, 0x56, 0x03, 0xff, 0x7e, 0x83, 0xe4, 0xe8,
	0x5b, 0xe8, 0x9d, 0xa5, 0x8a, 0x0a, 0xd3, 0x91, 0x2a, 0x7e, 0x45, 0xe9, 0xcb, 0x4f, 0x9a, 0xdb,
	0x6e, 0xef, 0x1f, 0x39, 0xba, 0xd0, 0x5f, 0x88, 0x54, 0xb3, 0x77, 0xb3, 0xa2, 0x50, 0x83, 0x72,
	0x5e, 0x17, 0x5a, 0x11, 0x92, 0xa3, 0x29, 0x78, 0xbf, 0x66, 0x89, 0x51, 0x60, 0xd1, 0xc7, 0x12,
	0xd6, 0x7d, 0xac, 0x19, 0xd3, 0x99, 0xfe, 0x96, 0x62, 0x91, 0x9d, 0x4c, 0x73, 0x15, 0x8a, 0xd4,
	0x76, 0x85, 0x6d, 0x6f, 0xfe, 0x2e, 0x69, 0xfc, 0x5b, 0xb2, 0xa1, 0xc5, 0xcd, 0x59, 0xce, 0x4b,
	0xa6, 0x51, 0x54, 0x4d, 0x4a, 0xfe, 0xe6, 0xa7, 0x3f, 0x7e, 0xbc, 0xca, 0x2e, 0x8f, 0x8e, 0x8e,
	0x26, 0x1f, 0x92, 0x34, 0x66, 0xe9, 0x6a, 0xb2, 0x60, 0x9b, 0xe9, 0x9c, 0x64, 0x92, 0xac, 0xa8,
	0x19, 0xf1, 0xd4, 0x48, 0xd7, 0xfc, 0xcb, 0x4c, 0xcd, 0x2f, 0xca, 0x82, 0xad, 0xa7, 0xf9, 0xab,
	0xef, 0x57, 0x64, 0x43, 0xf9, 0xe5, 0x65, 0xd7, 0x70, 0x5f, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0x32, 0x1a, 0xc9, 0xf3, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PvpClient is the client API for Pvp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PvpClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...grpc.CallOption) (*CreateRoomResp, error)
	Shoot(ctx context.Context, in *PvpShootReq, opts ...grpc.CallOption) (*PvpShootResp, error)
	Emotion(ctx context.Context, in *EmotionReq, opts ...grpc.CallOption) (*EmotionResp, error)
	Surrender(ctx context.Context, in *PvpSurrenderReq, opts ...grpc.CallOption) (*PvpSurrenderResp, error)
	BattleStatusAck(ctx context.Context, in *BattleStatusACKReq, opts ...grpc.CallOption) (*BattleStatusACKResp, error)
	EnterRoom(ctx context.Context, in *PvpEnterRoomReq, opts ...grpc.CallOption) (Pvp_EnterRoomClient, error)
	LastPVP(ctx context.Context, in *LastPvpReq, opts ...grpc.CallOption) (*LastPvpResp, error)
	QuitRoom(ctx context.Context, in *QuitRoomReq, opts ...grpc.CallOption) (*QuitRoomResp, error)
	GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...grpc.CallOption) (*GetRoomInfoResp, error)
	GetUsedTime(ctx context.Context, in *PvpUsedTimeReq, opts ...grpc.CallOption) (*PvpUsedTimeResp, error)
}

type pvpClient struct {
	cc *grpc.ClientConn
}

func NewPvpClient(cc *grpc.ClientConn) PvpClient {
	return &pvpClient{cc}
}

func (c *pvpClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...grpc.CallOption) (*CreateRoomResp, error) {
	out := new(CreateRoomResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) Shoot(ctx context.Context, in *PvpShootReq, opts ...grpc.CallOption) (*PvpShootResp, error) {
	out := new(PvpShootResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/Shoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) Emotion(ctx context.Context, in *EmotionReq, opts ...grpc.CallOption) (*EmotionResp, error) {
	out := new(EmotionResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/Emotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) Surrender(ctx context.Context, in *PvpSurrenderReq, opts ...grpc.CallOption) (*PvpSurrenderResp, error) {
	out := new(PvpSurrenderResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/Surrender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) BattleStatusAck(ctx context.Context, in *BattleStatusACKReq, opts ...grpc.CallOption) (*BattleStatusACKResp, error) {
	out := new(BattleStatusACKResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/BattleStatusAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) EnterRoom(ctx context.Context, in *PvpEnterRoomReq, opts ...grpc.CallOption) (Pvp_EnterRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pvp_serviceDesc.Streams[0], "/Msg.Pvp/EnterRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvpEnterRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvp_EnterRoomClient interface {
	Recv() (*PvpBattleStatus, error)
	grpc.ClientStream
}

type pvpEnterRoomClient struct {
	grpc.ClientStream
}

func (x *pvpEnterRoomClient) Recv() (*PvpBattleStatus, error) {
	m := new(PvpBattleStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvpClient) LastPVP(ctx context.Context, in *LastPvpReq, opts ...grpc.CallOption) (*LastPvpResp, error) {
	out := new(LastPvpResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/LastPVP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) QuitRoom(ctx context.Context, in *QuitRoomReq, opts ...grpc.CallOption) (*QuitRoomResp, error) {
	out := new(QuitRoomResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/QuitRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...grpc.CallOption) (*GetRoomInfoResp, error) {
	out := new(GetRoomInfoResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/GetRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvpClient) GetUsedTime(ctx context.Context, in *PvpUsedTimeReq, opts ...grpc.CallOption) (*PvpUsedTimeResp, error) {
	out := new(PvpUsedTimeResp)
	err := c.cc.Invoke(ctx, "/Msg.Pvp/GetUsedTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PvpServer is the server API for Pvp service.
type PvpServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	CreateRoom(context.Context, *CreateRoomReq) (*CreateRoomResp, error)
	Shoot(context.Context, *PvpShootReq) (*PvpShootResp, error)
	Emotion(context.Context, *EmotionReq) (*EmotionResp, error)
	Surrender(context.Context, *PvpSurrenderReq) (*PvpSurrenderResp, error)
	BattleStatusAck(context.Context, *BattleStatusACKReq) (*BattleStatusACKResp, error)
	EnterRoom(*PvpEnterRoomReq, Pvp_EnterRoomServer) error
	LastPVP(context.Context, *LastPvpReq) (*LastPvpResp, error)
	QuitRoom(context.Context, *QuitRoomReq) (*QuitRoomResp, error)
	GetRoomInfo(context.Context, *GetRoomInfoReq) (*GetRoomInfoResp, error)
	GetUsedTime(context.Context, *PvpUsedTimeReq) (*PvpUsedTimeResp, error)
}

func RegisterPvpServer(s *grpc.Server, srv PvpServer) {
	s.RegisterService(&_Pvp_serviceDesc, srv)
}

func _Pvp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).CreateRoom(ctx, req.(*CreateRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_Shoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PvpShootReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).Shoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/Shoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).Shoot(ctx, req.(*PvpShootReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_Emotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmotionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).Emotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/Emotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).Emotion(ctx, req.(*EmotionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_Surrender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PvpSurrenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).Surrender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/Surrender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).Surrender(ctx, req.(*PvpSurrenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_BattleStatusAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleStatusACKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).BattleStatusAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/BattleStatusAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).BattleStatusAck(ctx, req.(*BattleStatusACKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_EnterRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PvpEnterRoomReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvpServer).EnterRoom(m, &pvpEnterRoomServer{stream})
}

type Pvp_EnterRoomServer interface {
	Send(*PvpBattleStatus) error
	grpc.ServerStream
}

type pvpEnterRoomServer struct {
	grpc.ServerStream
}

func (x *pvpEnterRoomServer) Send(m *PvpBattleStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvp_LastPVP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastPvpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).LastPVP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/LastPVP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).LastPVP(ctx, req.(*LastPvpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_QuitRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).QuitRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/QuitRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).QuitRoom(ctx, req.(*QuitRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/GetRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).GetRoomInfo(ctx, req.(*GetRoomInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvp_GetUsedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PvpUsedTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvpServer).GetUsedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg.Pvp/GetUsedTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvpServer).GetUsedTime(ctx, req.(*PvpUsedTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pvp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Msg.Pvp",
	HandlerType: (*PvpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pvp_Ping_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Pvp_CreateRoom_Handler,
		},
		{
			MethodName: "Shoot",
			Handler:    _Pvp_Shoot_Handler,
		},
		{
			MethodName: "Emotion",
			Handler:    _Pvp_Emotion_Handler,
		},
		{
			MethodName: "Surrender",
			Handler:    _Pvp_Surrender_Handler,
		},
		{
			MethodName: "BattleStatusAck",
			Handler:    _Pvp_BattleStatusAck_Handler,
		},
		{
			MethodName: "LastPVP",
			Handler:    _Pvp_LastPVP_Handler,
		},
		{
			MethodName: "QuitRoom",
			Handler:    _Pvp_QuitRoom_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _Pvp_GetRoomInfo_Handler,
		},
		{
			MethodName: "GetUsedTime",
			Handler:    _Pvp_GetUsedTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnterRoom",
			Handler:       _Pvp_EnterRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pvp_server.proto",
}
